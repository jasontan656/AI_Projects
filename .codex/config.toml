# ==================== 核心模型配置 ====================
# 默认使用 GPT-5 模型
model = "gpt-5-codex"
model_provider = "openai"

# 推理配置
model_reasoning_effort = "high"
model_reasoning_summary = "detailed"
model_verbosity = "medium"
model_supports_reasoning_summaries = true

# 推理显示配置
hide_agent_reasoning = false
show_raw_agent_reasoning = true

# ==================== 批准与沙箱配置 ====================
# 从不提示批准（适合 CI/自动化）
approval_policy = "never"

# 完全访问权限（危险模式）
sandbox_mode = "danger-full-access"
windows_wsl_setup_acknowledged = true

# ==================== 工具配置 ====================
[features]
web_search_request = true  # 启用网络搜索工具

# ==================== 沙箱网络配置 ====================
[sandbox_workspace_write]
network_access = true

# ==================== 模型配置文件 ====================
# 可通过 --profile 参数切换模型

[profiles.gpt5-high]
model = "gpt-5"
model_reasoning_effort = "high"
approval_policy = "never"

[profiles.gpt5-medium]
model = "gpt-5"
model_reasoning_effort = "medium"
approval_policy = "never"

[profiles.o3]
model = "o3"
model_reasoning_effort = "high"
model_reasoning_summary = "detailed"
approval_policy = "never"

[profiles.o4-mini]
model = "o4-mini"
model_reasoning_effort = "medium"
model_reasoning_summary = "concise"
approval_policy = "never"

[profiles.gpt-4o]
model = "gpt-4o"
approval_policy = "never"

# ==================== 项目信任配置 ====================

[projects."/mnt/d/AI_Projects"]
trust_level = "trusted"

[projects.'\\?\D:\AI_Projects']
trust_level = "trusted"

# ==================== MCP 服务器配置 ====================
# Kobe MCP Server HTTP - 整合到主应用

# [mcp_servers.kobe-tools]
# type = "stdio"
# command = "D:\\AI_Projects\\Kobe\\.venv\\Scripts\\python.exe"
# args = ["D:\\AI_Projects\\Kobe\\mcp_server_codex.py"]
# startup_timeout_ms = 180000
# [mcp_servers.kobe-tools.env]
# APPDATA = "C:\\Users\\HP\\AppData\\Roaming"
# LOCALAPPDATA = "C:\\Users\\HP\\AppData\\Local"
# HOME = "C:\\Users\\HP"
# SystemRoot = "C:\\Windows"
# PYTHONPATH = "D:\\AI_Projects\\Kobe"


# 可选：添加自定义请求头
# [mcp_servers.kobe-tools.headers]
# X-Agent-Id = "codex"
# Authorization = "Bearer your_token_here"

# 说明：
# - 改为 stdio：Codex 直接以子进程启动 `mcp_stdio_server.py`
# - 无需 HTTP/SSE；避免握手中 initialized 通知引发的通道关闭
# - 支持的工具: read_file, write_file, list_directory, search_files,
#               add_vectors, semantic_search, delete_vectors
# - 已移除工具: web_search, fetch_webpage, execute_command, exa_search, playwright_capture
#   (这些功能由官方 MCP Server 或第三方 MCP Server 提供)
# - 启动命令: cd D:\AI_Projects\Kobe && uvicorn app:app --host 0.0.0.0 --port 8000

# Playwright MCP Server - 浏览器自动化
[mcp_servers.playwright]
type = "stdio"
command = "cmd"
args = ["/c","npx","-y","@playwright/mcp@latest"]
startup_timeout_ms = 180000
[mcp_servers.playwright.env]
APPDATA = "C:\\Users\\HP\\AppData\\Roaming"
LOCALAPPDATA = "C:\\Users\\HP\\AppData\\Local"
HOME = "C:\\Users\\HP"
SystemRoot = "C:\\Windows"
PYTHONPATH = "D:\\AI_Projects\\Kobe"


# PLAYWRIGHT_BROWSERS_PATH = "自定义浏览器缓存目录"  # 可选配置

# Context7 MCP Server - 上下文管理
[mcp_servers.context7]
type = "stdio"
command = "cmd"
args = ["/c","npx","-y", "@upstash/context7-mcp"]
startup_timeout_ms = 180000

[mcp_servers.context7.env]
CONTEXT7_API_KEY = "ctx7sk-8f0a1825-d3dc-46e4-af34-e72a554d6084"
APPDATA = "C:\\Users\\HP\\AppData\\Roaming"
LOCALAPPDATA = "C:\\Users\\HP\\AppData\\Local"
HOME = "C:\\Users\\HP"
SystemRoot = "C:\\Windows"

# Exa MCP Server - 搜索引擎
[mcp_servers.exa]
type = "stdio"
command = "cmd"
args = ["/c","npx","-y","exa-mcp"]
startup_timeout_ms = 180000

[mcp_servers.exa.env]
EXA_API_KEY = "515a2661-5fbc-458a-be88-b9dd7e6b2458"
APPDATA = "C:\\Users\\HP\\AppData\\Roaming"
LOCALAPPDATA = "C:\\Users\\HP\\AppData\\Local"
HOME = "C:\\Users\\HP"
SystemRoot = "C:\\Windows"

