"""
Auto-Discovery guard for the Kobe repository.

generated-from: 10@28a8d3a
"""
from __future__ import annotations

import argparse
import json
import sys
from pathlib import Path
from typing import Dict, List


DOC_ID = "10"
DOC_COMMIT = "28a8d3a"
EXPECTED_DIRS: List[str] = [
    "KnowledgeBase",
    "SharedUtility",
    "WorkPlan",
    "OpenaiAgents",
    "TelegramAPI",
    "Tests",
    "logs",
    "core",
    "Config",
    "Contracts",
]
REQUIRED_FILES: List[str] = ["app.py", ".env"]
READY_ACTIONS: List[str] = ["app.py created; core/Config/Contracts present (placeholders)"]
READY_NOTES = "OpenaiAgents/、TelegramAPI/、Tests/ 当前为空占位；仅用于后续重建"


def scan_repo(repo_root: Path) -> Dict[str, object]:
    repo_root = repo_root.resolve()
    existing_dirs: List[str] = []
    missing_dirs: List[str] = []

    for name in EXPECTED_DIRS:
        target = repo_root / name
        if target.exists():
            existing_dirs.append(name)
        else:
            missing_dirs.append(name)

    env_files = [str(path.relative_to(repo_root)) for path in repo_root.glob(".env*")]
    required_missing = [
        name for name in REQUIRED_FILES if not (repo_root / name).exists()
    ]

    status = "ready" if not missing_dirs and not required_missing else "incomplete"

    if status == "ready":
        actions = list(READY_ACTIONS)
        notes = READY_NOTES
    else:
        actions = []
        if missing_dirs:
            for name in missing_dirs:
                actions.append(f"create {name}/ and assign owner per plan")
        if required_missing:
            for name in required_missing:
                actions.append(f"restore {name} from secrets manager or template")
        if not actions:
            actions.append("all anchors satisfied; proceed with codegen and CI guards")
        notes = "Generated by scripts/check_anchors.py for continuous guardrails."

    payload: Dict[str, object] = {
        "generated_from": f"{DOC_ID}@{DOC_COMMIT}",
        "repo_root": str(repo_root),
        "existing_dirs": existing_dirs,
        "missing_dirs": missing_dirs + required_missing,
        "status": status,
        "actions": actions,
        "env_files": env_files,
        "notes": notes,
    }
    return payload


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Validate repository anchors required by the Kobe plan."
    )
    parser.add_argument(
        "--repo-root",
        type=Path,
        default=Path(__file__).resolve().parent.parent,
        help="Repository root to scan.",
    )
    parser.add_argument(
        "--output",
        type=Path,
        help="Optional path to write the discovery JSON.",
    )
    return parser.parse_args()


def main() -> int:
    args = parse_args()
    result = scan_repo(args.repo_root)

    if args.output:
        args.output.write_text(json.dumps(result, indent=2) + "\n", encoding="utf-8")
    else:
        json.dump(result, sys.stdout, indent=2)
        sys.stdout.write("\n")

    return 0 if result["status"] == "ready" else 1


if __name__ == "__main__":
    sys.exit(main())
