meta:
  version: "1.0"
  schema_version: "1"
  path: "Kobe/TelegramBot"
  last_updated: "2025-10-18"
  owners:
    - "kobe-telegram"
  stability: "alpha"

module:
  name: "TelegramBot"
  summary: "Telegram 机器人模块，提供 Webhook 集成、智能对话和群组监控能力"
  responsibilities:
    - "接收并处理 Telegram Webhook 请求"
    - "集成 LangChain 提供智能对话能力"
    - "支持私聊和群组对话监控"
    - "实现速率限制和消息过滤"
    - "持久化聊天历史到 MongoDB"
  non_goals:
    - "不支持 Long Polling 模式（仅 Webhook）"
    - "不直接处理支付、游戏等特殊消息类型"
  entry_points:
    - "POST /telegram/webhook - 接收 Telegram 更新"
    - "POST /telegram/setup-webhook - 设置 Webhook"
    - "GET /telegram/status - 获取机器人状态"

relations:
  depends_on:
    - "Kobe/SharedUtility/RichLogger"
    - "langchain"
    - "langchain-openai"
    - "redis"  # 速率限制、防抖、临时上下文
  used_by:
    - "Kobe/app.py"
  provides_apis:
    - "POST /telegram/webhook"
    - "POST /telegram/setup-webhook"
    - "POST /telegram/delete-webhook"
    - "GET /telegram/status"
  reasons:
    - "为 Kobe 项目提供 Telegram 即时通讯入口"
    - "复用现有 LangChain 智能对话能力"
    - "支持群组协作和自动化响应"

files:
  key_files:
    - "__init__.py"
    - "config.py - Pydantic v2 配置管理"
    - "models.py - Telegram API 数据模型"
    - "webhook.py - FastAPI 路由定义"
    - "handlers/message_handler.py - 消息处理逻辑"
    - "services/chat_service.py - LangChain 聊天服务"
    - "services/telegram_service.py - Telegram API 客户端"
  test_locations: []

architecture:
  pattern: "三层架构"
  layers:
    - name: "路由层 (webhook.py)"
      responsibility: "接收 HTTP 请求，验证参数，返回响应"
    - name: "处理层 (handlers/)"
      responsibility: "消息分发、速率限制、过滤逻辑"
    - name: "服务层 (services/)"
      responsibility: "LangChain 集成、Telegram API 调用、数据持久化"
  
  data_flow: |
    Telegram -> ngrok -> FastAPI Webhook -> MessageHandler
    -> ChatService (LangChain) -> TelegramService -> 发送回复

configuration:
  required_env_vars:
    - TELEGRAM_BOT_TOKEN
    - TELEGRAM_WEBHOOK_URL
    - OPENAI_API_KEY
    - REDIS_URL
  optional_env_vars:
    - TELEGRAM_WEBHOOK_SECRET
    - TELEGRAM_KEYWORDS
    - TELEGRAM_USER_RATE_LIMIT
    - TELEGRAM_GROUP_RATE_LIMIT

features:
  implemented:
    - "Webhook 实时消息接收"
    - "私聊立即回复"
    - "群组被@立即回复"
    - "群组未@防抖回复（15秒聚合）"
    - "Redis 防抖队列"
    - "速率限制（Redis）"
    - "临时上下文存储（Redis，最近 10 轮）"
    - "重启清空，无持久化"
  planned:
    - "Function calling 工具调用"
    - "多轮对话状态管理"
    - "群组管理命令"
    - "用户权限控制"
    - "智能判断是否需要回复"

notes:
  - "使用前需在 .env 中配置 TELEGRAM_BOT_TOKEN"
  - "需要通过 ngrok 或 Cloudflare Tunnel 提供 HTTPS 公网地址"
  - "首次启动后需调用 POST /telegram/setup-webhook 设置 Webhook"
  - "群组中需要关闭机器人的隐私模式（Privacy Mode）才能接收所有消息"
  - "Redis 必须正常运行，用于所有数据存储"
  - "所有数据为临时存储（重启清空），不做持久化"
  - "群组防抖时间默认 15 秒，可通过 TELEGRAM_GROUP_DEBOUNCE_SECONDS 配置"
  - "支持多机器人：所有 Redis 键通过 bot_id 隔离"

