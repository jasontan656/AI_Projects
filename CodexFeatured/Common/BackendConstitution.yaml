---
meta:
  name: "Backend Constitution"
  version: "2.1"
  last_updated: "2025-10-11"
  language: "zh-CN"

mandates:
  runtime:
    python: "3.10"
    venv: "Kobe/.venv"                # 项目级虚拟环境，避免全局污染
    env_file: "Kobe/.env"             # 统一环境变量入口，不覆盖已设置的进程变量
    validation: "Pydantic v2"          # 采用 v2，版本上限 <3，便于未来升级
    async_io: true                      # I/O 默认支持 async/await
    llm:                                 # 大模型使用规范
      provider: "OpenAI"                # 统一使用 OpenAI 官方 SDK
      api_key_env: "OPENAI_API_KEY"     # API Key 环境变量名
      model_env: "OPENAI_MODEL"         # 模型环境变量名
      default_model: "gpt-4o-mini"      # 推荐默认模型
      required: true                     # 未连通 LLM 时，相关流程必须直接失败

  app:
    framework: "FastAPI"
    app_entry: "Kobe.main:app"
    start_dev: "python -m Kobe.main"
    start_prod: "uvicorn Kobe.main:app --host 0.0.0.0 --port 8000"

  logging:
    module: "Kobe.SharedUtility.RichLogger"
    rule: "统一使用 logging，禁止直接 print()"

  background_tasks:
    orchestrator: "Celery"
    broker: "RabbitMQ"
    cache_store: "Redis"
    mandatory: true                    # 强制：所有业务任务必须经由 Celery 调度
    task_naming: "Slug-only (^[a-z0-9_:.]{1,64}$)"
    registration: "通过 Kobe.SharedUtility.TaskQueue.registry.task 装饰器注册"
    dispatch: "HTTP 或 /task/start 通用分发；提供 send_task() 封装"
    allowlist: "从 .env 读取 ALLOWED_TASKS，按 slug 校验"

  messaging:
    semantics: "at-least-once"
    publisher_confirm: true
    durable_persistent: true
    retry_policy: "指数退避 + 幂等"

  api:
    policy_ref: "所有任务一律走 Celery 异步；HTTP 层仅接收/查询"
    long_flow: "使用 chain/group/chord 结构化编排"

  execution:
    mode: "async_only"                # 统一执行模式
    rule: "业务侧不得在请求线程直接执行任务，必须入队 Celery"

  cache:
    strategy: "Write→Invalidate"
    keys: "分层命名 + 统一 TTL"
    strict: "强一致诉求使用 Transactional Outbox/CDC"

  observability:
    expose: ["Metrics", "Logs", "Traces"]
    stack: ["Prometheus", "OpenTelemetry"]

  security:
    secrets_policy: "密钥集中管理，最小权限原则"

  infrastructure_local:
    docker_network: "ai_services_net"
    services:
      redis: { name: "svc-redis", ports: ["6379:6379"] }
      mongodb: { name: "svc-mongo", ports: ["27017:27017"] }
      rabbitmq: { name: "svc-rabbitmq", ports: ["5672:5672", "15672:15672"] }
      chromadb: { name: "svc-chromadb", ports: ["8001:8001"] }

  env_defaults:
    REDIS_URL:
      host: "redis://localhost:6379/0"
      container: "redis://svc-redis:6379/0"
    MONGODB_URI:
      host: "mongodb://localhost:27017"
      container: "mongodb://svc-mongo:27017"
    RABBITMQ_URL:
      host: "amqp://guest:guest@localhost:5672/"
      container: "amqp://guest:guest@svc-rabbitmq:5672/"
    CHROMADB_URL:
      host: "http://localhost:8001"
      container: "http://svc-chromadb:8001"
    OPENAI_MODEL: "gpt-4o-mini"       # 默认模型名（可在 .env 覆盖）
    production: "上线前需完成凭据接入与只读审计"

  dependencies:
    requirements_file: "Kobe/Requirements.txt"
    libs: [
      "fastapi", "uvicorn", "pydantic>=2.7,<3",
      "celery", "redis", "hiredis", "pymongo", "motor", "pika", "chromadb",
      "openai", "sqlparse", "pymysql"
    ]

  index_spec:
    root_index: "Kobe/index.yaml"
    sub_index: "重要目录需附 index.yaml"
    path_style: "路径统一起始 Kobe/，使用正斜杠"
    bounds: "代码文件限定在 Kobe/ 下"

prohibitions:
  - "禁止长时间阻塞型同步 I/O"
  - "禁止在 app 入口外创建全局线程"
  - "禁止抛弃型消息（需 DLQ/重试）"
  - "禁止生产凭据入库"
  - "禁止 Redis 充当持久化数据库"
  - "禁止绕过 Celery 在请求线程/线程池直接执行任务"

